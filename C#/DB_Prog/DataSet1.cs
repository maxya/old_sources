//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DB_Prog {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private jobsDataTable tablejobs;
        
        private UsersDataTable tableUsers;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["jobs"] != null)) {
                    this.Tables.Add(new jobsDataTable(ds.Tables["jobs"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    this.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public jobsDataTable jobs {
            get {
                return this.tablejobs;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersDataTable Users {
            get {
                return this.tableUsers;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["jobs"] != null)) {
                this.Tables.Add(new jobsDataTable(ds.Tables["jobs"]));
            }
            if ((ds.Tables["Users"] != null)) {
                this.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablejobs = ((jobsDataTable)(this.Tables["jobs"]));
            if ((this.tablejobs != null)) {
                this.tablejobs.InitVars();
            }
            this.tableUsers = ((UsersDataTable)(this.Tables["Users"]));
            if ((this.tableUsers != null)) {
                this.tableUsers.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablejobs = new jobsDataTable();
            this.Tables.Add(this.tablejobs);
            this.tableUsers = new UsersDataTable();
            this.Tables.Add(this.tableUsers);
        }
        
        private bool ShouldSerializejobs() {
            return false;
        }
        
        private bool ShouldSerializeUsers() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void jobsRowChangeEventHandler(object sender, jobsRowChangeEvent e);
        
        public delegate void UsersRowChangeEventHandler(object sender, UsersRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class jobsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnjob;
            
            private DataColumn columnadress;
            
            private DataColumn columntitle;
            
            internal jobsDataTable() : 
                    base("jobs") {
                this.InitClass();
            }
            
            internal jobsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn jobColumn {
                get {
                    return this.columnjob;
                }
            }
            
            internal DataColumn adressColumn {
                get {
                    return this.columnadress;
                }
            }
            
            internal DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            public jobsRow this[int index] {
                get {
                    return ((jobsRow)(this.Rows[index]));
                }
            }
            
            public event jobsRowChangeEventHandler jobsRowChanged;
            
            public event jobsRowChangeEventHandler jobsRowChanging;
            
            public event jobsRowChangeEventHandler jobsRowDeleted;
            
            public event jobsRowChangeEventHandler jobsRowDeleting;
            
            public void AddjobsRow(jobsRow row) {
                this.Rows.Add(row);
            }
            
            public jobsRow AddjobsRow(string job, string adress, string title) {
                jobsRow rowjobsRow = ((jobsRow)(this.NewRow()));
                rowjobsRow.ItemArray = new object[] {
                        job,
                        adress,
                        title};
                this.Rows.Add(rowjobsRow);
                return rowjobsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                jobsDataTable cln = ((jobsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new jobsDataTable();
            }
            
            internal void InitVars() {
                this.columnjob = this.Columns["job"];
                this.columnadress = this.Columns["adress"];
                this.columntitle = this.Columns["title"];
            }
            
            private void InitClass() {
                this.columnjob = new DataColumn("job", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnjob);
                this.columnadress = new DataColumn("adress", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnadress);
                this.columntitle = new DataColumn("title", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntitle);
            }
            
            public jobsRow NewjobsRow() {
                return ((jobsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new jobsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(jobsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.jobsRowChanged != null)) {
                    this.jobsRowChanged(this, new jobsRowChangeEvent(((jobsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.jobsRowChanging != null)) {
                    this.jobsRowChanging(this, new jobsRowChangeEvent(((jobsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.jobsRowDeleted != null)) {
                    this.jobsRowDeleted(this, new jobsRowChangeEvent(((jobsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.jobsRowDeleting != null)) {
                    this.jobsRowDeleting(this, new jobsRowChangeEvent(((jobsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovejobsRow(jobsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class jobsRow : DataRow {
            
            private jobsDataTable tablejobs;
            
            internal jobsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablejobs = ((jobsDataTable)(this.Table));
            }
            
            public string job {
                get {
                    try {
                        return ((string)(this[this.tablejobs.jobColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejobs.jobColumn] = value;
                }
            }
            
            public string adress {
                get {
                    try {
                        return ((string)(this[this.tablejobs.adressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejobs.adressColumn] = value;
                }
            }
            
            public string title {
                get {
                    try {
                        return ((string)(this[this.tablejobs.titleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablejobs.titleColumn] = value;
                }
            }
            
            public bool IsjobNull() {
                return this.IsNull(this.tablejobs.jobColumn);
            }
            
            public void SetjobNull() {
                this[this.tablejobs.jobColumn] = System.Convert.DBNull;
            }
            
            public bool IsadressNull() {
                return this.IsNull(this.tablejobs.adressColumn);
            }
            
            public void SetadressNull() {
                this[this.tablejobs.adressColumn] = System.Convert.DBNull;
            }
            
            public bool IstitleNull() {
                return this.IsNull(this.tablejobs.titleColumn);
            }
            
            public void SettitleNull() {
                this[this.tablejobs.titleColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class jobsRowChangeEvent : EventArgs {
            
            private jobsRow eventRow;
            
            private DataRowAction eventAction;
            
            public jobsRowChangeEvent(jobsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public jobsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UsersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnLastName;
            
            private DataColumn columnage;
            
            internal UsersDataTable() : 
                    base("Users") {
                this.InitClass();
            }
            
            internal UsersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal DataColumn ageColumn {
                get {
                    return this.columnage;
                }
            }
            
            public UsersRow this[int index] {
                get {
                    return ((UsersRow)(this.Rows[index]));
                }
            }
            
            public event UsersRowChangeEventHandler UsersRowChanged;
            
            public event UsersRowChangeEventHandler UsersRowChanging;
            
            public event UsersRowChangeEventHandler UsersRowDeleted;
            
            public event UsersRowChangeEventHandler UsersRowDeleting;
            
            public void AddUsersRow(UsersRow row) {
                this.Rows.Add(row);
            }
            
            public UsersRow AddUsersRow(string Name, string LastName, int age) {
                UsersRow rowUsersRow = ((UsersRow)(this.NewRow()));
                rowUsersRow.ItemArray = new object[] {
                        Name,
                        LastName,
                        age};
                this.Rows.Add(rowUsersRow);
                return rowUsersRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UsersDataTable cln = ((UsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UsersDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnLastName = this.Columns["LastName"];
                this.columnage = this.Columns["age"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastName);
                this.columnage = new DataColumn("age", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnage);
            }
            
            public UsersRow NewUsersRow() {
                return ((UsersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UsersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UsersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsersRowChanged != null)) {
                    this.UsersRowChanged(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsersRowChanging != null)) {
                    this.UsersRowChanging(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsersRowDeleted != null)) {
                    this.UsersRowDeleted(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsersRowDeleting != null)) {
                    this.UsersRowDeleting(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUsersRow(UsersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UsersRow : DataRow {
            
            private UsersDataTable tableUsers;
            
            internal UsersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsers = ((UsersDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableUsers.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.NameColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableUsers.LastNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.LastNameColumn] = value;
                }
            }
            
            public int age {
                get {
                    try {
                        return ((int)(this[this.tableUsers.ageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.ageColumn] = value;
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableUsers.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableUsers.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastNameNull() {
                return this.IsNull(this.tableUsers.LastNameColumn);
            }
            
            public void SetLastNameNull() {
                this[this.tableUsers.LastNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsageNull() {
                return this.IsNull(this.tableUsers.ageColumn);
            }
            
            public void SetageNull() {
                this[this.tableUsers.ageColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UsersRowChangeEvent : EventArgs {
            
            private UsersRow eventRow;
            
            private DataRowAction eventAction;
            
            public UsersRowChangeEvent(UsersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
