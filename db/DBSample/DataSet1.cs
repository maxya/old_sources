//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DBSample {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private table1DataTable tabletable1;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["table1"] != null)) {
                    this.Tables.Add(new table1DataTable(ds.Tables["table1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public table1DataTable table1 {
            get {
                return this.tabletable1;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["table1"] != null)) {
                this.Tables.Add(new table1DataTable(ds.Tables["table1"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletable1 = ((table1DataTable)(this.Tables["table1"]));
            if ((this.tabletable1 != null)) {
                this.tabletable1.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletable1 = new table1DataTable();
            this.Tables.Add(this.tabletable1);
        }
        
        private bool ShouldSerializetable1() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void table1RowChangeEventHandler(object sender, table1RowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class table1DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnage;
            
            private DataColumn columnkey;
            
            private DataColumn columnlastname;
            
            private DataColumn columnname;
            
            internal table1DataTable() : 
                    base("table1") {
                this.InitClass();
            }
            
            internal table1DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ageColumn {
                get {
                    return this.columnage;
                }
            }
            
            internal DataColumn keyColumn {
                get {
                    return this.columnkey;
                }
            }
            
            internal DataColumn lastnameColumn {
                get {
                    return this.columnlastname;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            public table1Row this[int index] {
                get {
                    return ((table1Row)(this.Rows[index]));
                }
            }
            
            public event table1RowChangeEventHandler table1RowChanged;
            
            public event table1RowChangeEventHandler table1RowChanging;
            
            public event table1RowChangeEventHandler table1RowDeleted;
            
            public event table1RowChangeEventHandler table1RowDeleting;
            
            public void Addtable1Row(table1Row row) {
                this.Rows.Add(row);
            }
            
            public table1Row Addtable1Row(int age, string lastname, string name) {
                table1Row rowtable1Row = ((table1Row)(this.NewRow()));
                rowtable1Row.ItemArray = new object[] {
                        age,
                        null,
                        lastname,
                        name};
                this.Rows.Add(rowtable1Row);
                return rowtable1Row;
            }
            
            public table1Row FindBykey(int key) {
                return ((table1Row)(this.Rows.Find(new object[] {
                            key})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                table1DataTable cln = ((table1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new table1DataTable();
            }
            
            internal void InitVars() {
                this.columnage = this.Columns["age"];
                this.columnkey = this.Columns["key"];
                this.columnlastname = this.Columns["lastname"];
                this.columnname = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnage = new DataColumn("age", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnage);
                this.columnkey = new DataColumn("key", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnkey);
                this.columnlastname = new DataColumn("lastname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastname);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnkey}, true));
                this.columnkey.AutoIncrement = true;
                this.columnkey.AllowDBNull = false;
                this.columnkey.Unique = true;
            }
            
            public table1Row Newtable1Row() {
                return ((table1Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new table1Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(table1Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.table1RowChanged != null)) {
                    this.table1RowChanged(this, new table1RowChangeEvent(((table1Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.table1RowChanging != null)) {
                    this.table1RowChanging(this, new table1RowChangeEvent(((table1Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.table1RowDeleted != null)) {
                    this.table1RowDeleted(this, new table1RowChangeEvent(((table1Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.table1RowDeleting != null)) {
                    this.table1RowDeleting(this, new table1RowChangeEvent(((table1Row)(e.Row)), e.Action));
                }
            }
            
            public void Removetable1Row(table1Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class table1Row : DataRow {
            
            private table1DataTable tabletable1;
            
            internal table1Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletable1 = ((table1DataTable)(this.Table));
            }
            
            public int age {
                get {
                    try {
                        return ((int)(this[this.tabletable1.ageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable1.ageColumn] = value;
                }
            }
            
            public int key {
                get {
                    return ((int)(this[this.tabletable1.keyColumn]));
                }
                set {
                    this[this.tabletable1.keyColumn] = value;
                }
            }
            
            public string lastname {
                get {
                    try {
                        return ((string)(this[this.tabletable1.lastnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable1.lastnameColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tabletable1.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletable1.nameColumn] = value;
                }
            }
            
            public bool IsageNull() {
                return this.IsNull(this.tabletable1.ageColumn);
            }
            
            public void SetageNull() {
                this[this.tabletable1.ageColumn] = System.Convert.DBNull;
            }
            
            public bool IslastnameNull() {
                return this.IsNull(this.tabletable1.lastnameColumn);
            }
            
            public void SetlastnameNull() {
                this[this.tabletable1.lastnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tabletable1.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tabletable1.nameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class table1RowChangeEvent : EventArgs {
            
            private table1Row eventRow;
            
            private DataRowAction eventAction;
            
            public table1RowChangeEvent(table1Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public table1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
