// SWStream.cpp: implementation of the CSWStream class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "SWStream.h"

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CSWStream::CSWStream() : m_cRefs (0)
{

}

CSWStream::~CSWStream()
{

}

//////////////////////////////////////////////////////////////////////
// IUnknown Methods
//////////////////////////////////////////////////////////////////////

HRESULT CSWStream::QueryInterface(REFIID iid, void ** ppvObject)
{
	if (iid == IID_IUnknown)
		*ppvObject = static_cast<IUnknown*>(this);
	else if (iid == IID_ISequentialStream)
		*ppvObject = static_cast<ISequentialStream*>(this);
	else if(iid == IID_IStream)
		*ppvObject = static_cast<IStream*>(this);
	else
	{
		*ppvObject = NULL;
		return E_NOINTERFACE;
	}
	AddRef ();
	return S_OK;
}

//////////////////////////////////////////////////////////////////////

ULONG CSWStream::AddRef(void)
{
	return InterlockedIncrement (&m_cRefs);
}

//////////////////////////////////////////////////////////////////////

ULONG CSWStream::Release(void)
{
	if (!InterlockedDecrement (&m_cRefs))
	{
		delete this;
		return 0;
	}
	return m_cRefs;
}

//////////////////////////////////////////////////////////////////////
// ISequentialStream Methods
//////////////////////////////////////////////////////////////////////

HRESULT CSWStream::Read(void *pv, ULONG cb, ULONG *pcbRead)
{
	return E_NOTIMPL;
}

//////////////////////////////////////////////////////////////////////

HRESULT CSWStream::Write(void const *pv, ULONG cb, ULONG *pcbWritten)
{
	return E_NOTIMPL;
}

//////////////////////////////////////////////////////////////////////
// IStream Methods
//////////////////////////////////////////////////////////////////////

HRESULT CSWStream::Seek(LARGE_INTEGER dlibMove, DWORD dwOrigin, 
						ULARGE_INTEGER *plibNewPosition)
{
	return E_NOTIMPL;
}

//////////////////////////////////////////////////////////////////////

HRESULT CSWStream::SetSize(ULARGE_INTEGER libNewSize)
{
	return E_NOTIMPL;
}

//////////////////////////////////////////////////////////////////////

HRESULT CSWStream::CopyTo(IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, 
						  ULARGE_INTEGER *pcbWritten)
{
	return E_NOTIMPL;
}

//////////////////////////////////////////////////////////////////////

HRESULT CSWStream::Commit(DWORD grfCommitFlags)
{
	return E_NOTIMPL;
}

//////////////////////////////////////////////////////////////////////

HRESULT CSWStream::Revert(void)
{
	return E_NOTIMPL;
}

//////////////////////////////////////////////////////////////////////

HRESULT CSWStream::LockRegion(ULARGE_INTEGER libOffset, ULARGE_INTEGER cb,
							  DWORD dwLockType)
{
	return E_NOTIMPL;
}

//////////////////////////////////////////////////////////////////////

HRESULT CSWStream::UnlockRegion(ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, 
								DWORD dwLockType)
{
	return E_NOTIMPL;
}

//////////////////////////////////////////////////////////////////////

HRESULT CSWStream::Stat(STATSTG *pstatstg, DWORD grfStatFlag)
{
	return E_NOTIMPL;
}

//////////////////////////////////////////////////////////////////////

HRESULT CSWStream::Clone(IStream **ppstm)
{
	return E_NOTIMPL;
}
