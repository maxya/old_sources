# Process this file with autoconf to produce a configure script.
AC_INIT(xcomeu3d, 0.1.0, yarik@vershynin.com)
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE(xcomeu3d, 0.1.0)
AC_CONFIG_SRCDIR(src/main.cpp)
AM_CONFIG_HEADER(config.h)
AC_LANG(C++)
AC_PREREQ(2.52)

# Templates
AH_TEMPLATE([ARCH_X86], [Define for x86 architectures])
AH_TEMPLATE([ARCH_PPC], [Define for ppc architectures])
AH_TEMPLATE([WIN32], [Define for Win32 targets])
AH_TEMPLATE([POSIX], [Define for POSIX targets])
AH_TEMPLATE([LINUX], [Define for LINUX targets])
AH_TEMPLATE([FREEBSD], [Define for FreeBSD targets])
AH_TEMPLATE([__APPLE__], [Define for MacOS X targets])
AH_TEMPLATE([MINGW], [Define for MinGW targets])


AC_ENABLE_SHARED(yes)
AC_ENABLE_STATIC(no)

# Compiler and linker flags
CFLAGS="-pipe -ffast-math"
CXXFLAGS="$CFLAGS -felide-constructors"


# configure options
AC_ARG_ENABLE(debug, AC_HELP_STRING([--enable-debug], [Build xcomeu3d with debugging symbols]), , enable_debug=no)
AC_ARG_WITH(neoengine, 	[  --with-neoengine=PREFIX use NeoEngine in <PREFIX>],
						[LOCALFLAGS="$LOCALFLAGS -I$withval/include" LDFLAGS="$LDFLAGS -L$withval/lib $LIBS"])


case $target in
	*freebsd*)
		pedantic_flag=""
		warn_flags="-Wall"
		extra_flags="-D_GNU_SOURCE"
		LDFLAGS="$LDFLAGS -pthread"
		AC_DEFINE([FREEBSD], 1)
		AC_DEFINE([POSIX], 1)
		;;
	*linux*)
		pedantic_flag=""
		warn_flags="-Wall -Werror"
		extra_flags="-D_GNU_SOURCE"
		AC_DEFINE([POSIX], 1)
		AC_DEFINE([LINUX], 1)
		;;
	*)
		AC_MSG_ERROR([Unsupported target ($target)])
		;;
esac

CFLAGS="$CFLAGS $LOCALFLAGS $warn_flags $pedantic_flag $extra_flags -DNEOCHUNKIO_INTERNALS"
CXXFLAGS="$CXXFLAGS $LOCALFLAGS $warn_flags $pedantic_flag $extra_flags -DNEOCHUNKIO_INTERNALS"


AC_SUBST(OPTIONS)
if test "x$enable_debug" = "xno"
then
    CFLAGS="$CFLAGS -O3"
    CXXFLAGS="$CXXFLAGS -fomit-frame-pointer -O3"
else
    CFLAGS="$CFLAGS -g3 -D_DEBUG"
    CXXFLAGS="$CXXFLAGS -g3 -D_DEBUG"
fi

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AM_PROG_LIBTOOL
AC_PROG_MAKE_SET


case $target in
	i?86*)
		echo "Configuring compiler for x86"
		AC_DEFINE([ARCH_X86], 1)
		;;
	powerpc*)
		echo "Configuring compiler for ppc"
		AC_DEFINE([ARCH_PPC], 1)
		;;
	*)
		AC_MSG_WARN(Unsupported architecture)
		return
		;;
esac


# Checks for typedefs, structures, and compiler characteristics.

# Checks for libraries.
AC_CHECK_LIB([neoengine],[NeoEngineInit],,[AC_MSG_ERROR([Sorry, this application needs NeoEngine])])

AC_CONFIG_FILES([Makefile src/Makefile])

AC_OUTPUT

